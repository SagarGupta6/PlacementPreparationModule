class Solution {
    int n;
    int dp[];

    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        n = startTime.length;
        dp = new int[n];
        Arrays.fill(dp, -1);
        int[][] intervals = new int[n][3];
        for (int i = 0; i < n; i++) {
            intervals[i][0] = startTime[i];
            intervals[i][1] = endTime[i];
            intervals[i][2] = profit[i];
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        return helper(intervals, 0);
    }

    private int helper(int[][] intervals, int i) {
        if (i == intervals.length)
            return 0;
        else if (dp[i] != -1)
            return dp[i];
        return dp[i] = Math.max(helper(intervals, binarySearch(intervals, intervals[i][1], i)) + intervals[i][2],
                helper(intervals, i + 1));
    }

    private int binarySearch(int[][] intervals, int end, int start) {
        int l = start;
        int r = intervals.length;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (intervals[m][0] < end)
                l = m + 1;
            else
                r = m;
        }
        return l;
    }
}
TreeMap + DP

class Solution {
    Map<Integer, Integer> memo;

    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length;
        memo = new HashMap<>();
        TreeMap<Integer, List<int[]>> map = new TreeMap<>();
        for (int i = 0; i < n; i++) {
            int start = startTime[i];
            int end = endTime[i];
            int credit = profit[i];
            List<int[]> list = map.getOrDefault(start, new ArrayList<>());
            list.add(new int[] { end, credit });
            map.put(start, list);
        }
        return helper(map, 0);
    }

    private int helper(TreeMap<Integer, List<int[]>> map, int end) {
        if (map.ceilingEntry(end) == null)
            return 0;
        else if (memo.containsKey(end))
            return memo.get(end);
        Integer next = map.ceilingKey(end);
        int max = 0;
        for (int[] job : map.get(next)) {
            int eventEnd = job[0];
            int credit = job[1];
            max = Math.max(max, helper(map, eventEnd) + credit);
        }
        memo.put(end, Math.max(max, helper(map, next + 1)));
        return memo.get(end);
    }
}